Drug Sensitivity Analysis and Dynamic Dashboard (GDSC) 🚀



Table of Contents 📋
Project Overview
Key Features
Real-Time Data Fetching
Dynamic Programming
Visual Exploration of Drug Sensitivity
Dashboard Pages
Metrics Explained
Technology Stack
Team Members and Responsibilities
How to Use the Dashboard
Repository Structure
Installation and Setup
Contributing
License
Contact
Project Overview 📊
This project focuses on Drug Sensitivity Analysis using the Genomics of Drug Sensitivity in Cancer (GDSC) dataset. The objective is to create a real-time interactive dashboard that provides insights into the effects of various drugs on different cancer types, supporting better treatment decisions. Our dashboard dynamically updates with new data, offering fresh insights every time data is loaded.

We used Python for data pre-processing and implemented real-time updates through the Google Console API. The dataset is stored in a SQL database using SQL Alchemy, making it easier to manipulate and retrieve data for visualization in Power BI.

Key Features ✨
1. Real-Time Data Fetching
Data is fetched from Google Console using API keys, ensuring the dashboard is up-to-date with the latest drug sensitivity information.

2. Dynamic Programming
The data pipeline from Python to SQL updates in real time using the time function, providing real-time insights as new data is loaded.

3. Visual Exploration of Drug Sensitivity
The dashboard includes interactive visualizations such as:

Cards for quick summary insights.
Slicers for dynamic data filtering.
Donut and Funnel Charts for showcasing key metrics.
Tree Map to illustrate relationships between cancer types and drug sensitivity.
Clustered Column Charts, Line Charts, and more for detailed analysis.

Dashboard Pages 📂
The dashboard consists of three key pages:

Page 1: Title
Project Logo
Page 2: GDSC Treatment Insights
Provides a general overview of drug sensitivity metrics such as Unique Drugs, Average IC50, Average LN(IC50), and Average AUC Sensitivity. Includes interactive visualizations like Cards, Slicers, Donut Charts, Clustered Column Charts, Tree Maps, Funnel Charts, Gauge Charts, and more for in-depth exploration.

Page 3: Advanced Insights
Offers deeper analysis of metrics like AUC, Z-Score, and more, with customizable visualizations for advanced users.

Metrics Explained 📈
IC50: A measure of the concentration of a drug required to inhibit 50% of cancer cells. Lower values indicate higher sensitivity.
LN(IC50): Logarithmic transformation of IC50 values, used to normalize the distribution.
AUC (Area Under Curve): Reflects the overall effectiveness of a drug. Higher values indicate stronger sensitivity.
Z-Score: Standardized score representing the variation of drug sensitivity across different cancer tissue types.
Technology Stack 🛠️
Python: Used for data preprocessing and real-time data updates with the Pandas library for data manipulation.
SQL Alchemy: To efficiently transfer data from Python to a SQL database.
Google Console: For fetching real-time data using API keys.
Power BI: Visualization tool used for building interactive and dynamic dashboards.
DAX (Data Analysis Expressions): Power BI's formula language used for dynamic calculation of metrics such as AUC Sensitivity.
Team Members and Responsibilities 👥
Abhishek Mishra (Team Lead): Managed the project, led data analysis, created the Power BI dashboard, and implemented DAX formulas for metrics like AUC Sensitivity.
Sree Ram: Focused on Python programming, handling data cleaning, merging, and transforming. Responsible for using SQL Alchemy to transfer data from Python to the SQL database and connected the SQL database to Power BI.
Sriyanshu: Handled data exploration and key metrics analysis, created the project logo, designed the backgrounds, and added a QR code linking to the project repository.
Yashjeet: Managed the GitHub repository, posted code updates, and handled version control. Led the process of fetching data from Google Console and transferring it into the SQL database.
How to Use the Dashboard 🧭
Clone the Repository and Install Dependencies:

sh
Copy code
git clone https://github.com/Abhi-0312/Energy_Efficient_Engineers_050.git
cd Energy_Efficient_Engineers_050
pip install -r requirements.txt
Set Up the SQL Database:

Use the scripts provided in the /scripts directory to set up your SQL database.
Configure Google Console API:

Obtain API keys from Google Console.
Configure the API keys in the relevant Python scripts for real-time data fetching.
Open the Power BI Dashboard:

Navigate to the /dashboard directory.
Open the Power BI file (Dashboard.pbix) to explore the interactive dashboard.
Interact with the Dashboard:

Use Slicers to filter data by Cancer Type, Drug Name, Target Pathway, and more.
Explore different charts and visualizations to gain detailed insights into drug performance across various cancer types.
The data is fetched in real-time from Google Console and updates dynamically.
Repository Structure 📂
kotlin
Copy code
Energy_Efficient_Engineers_050/
├── assets/
│   ├── logo.png
│   ├── dashboard_screenshot.png
│   └── workflow_demo.gif
├── data/
│   └── GDSC_data.csv
├── scripts/
│   ├── data_preprocessing.py
│   ├── data_transfer.py
│   └── setup_database.sql
├── dashboard/
│   └── Dashboard.pbix
├── README.md
├── requirements.txt
└── LICENSE
Installation and Setup 🛠️
Clone the Repository:

sh
Copy code
git clone https://github.com/Abhi-0312/Energy_Efficient_Engineers_050.git
cd Energy_Efficient_Engineers_050
Install the Required Python Packages:

sh
Copy code
pip install -r requirements.txt
Set Up the SQL Database:

Navigate to the /scripts directory.
Run the SQL setup script to create the necessary database and tables:
sh
Copy code
python setup_database.py
Configure Google Console API:

Obtain your API keys from Google Console.
Update the API keys in the relevant Python scripts (data_preprocessing.py and data_transfer.py).
Run the Data Pipeline:

sh
Copy code
python data_preprocessing.py
python data_transfer.py
Open the Power BI Dashboard:

Navigate to the /dashboard directory.
Open Dashboard.pbix in Power BI to view and interact with the dashboard.
🤝 Contributing
We welcome contributions to improve this project! Whether it's adding new features, fixing bugs, or enhancing documentation, your help is appreciated. Please follow these steps to contribute:

Fork the Repository
Create a New Branch:
sh
Copy code
git checkout -b feature/YourFeatureName
Commit Your Changes:
sh
Copy code
git commit -m "Add your message here"
Push to the Branch:
sh
Copy code
git push origin feature/YourFeatureName
Open a Pull Request
Please make sure to update tests as appropriate and adhere to the project's coding standards.

License 📄
This project is licensed under the MIT License. You are free to use, modify, and distribute this project under the terms of the MIT License.

📬 Contact
For any questions or inquiries, feel free to reach out to Abhishek Mishra:

Email: pawan7221yj@gmail.com
GitHub: Abhi-0312/Energy_Efficient_Engineers_050
Additional Interactive Elements
🎥 Video Demo
Check out our Video Demo to see the dashboard in action!

📄 Documentation
Project Wiki
API Documentation
By incorporating these interactive elements, your README becomes more engaging and user-friendly, making it easier for others to understand and contribute to your project.